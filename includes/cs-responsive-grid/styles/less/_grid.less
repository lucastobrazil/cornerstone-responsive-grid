.grid {
    display: flex;
    flex-wrap: wrap;
    list-style: none;
    margin: -@standardpadding 0 @standardpadding -@standardpadding;
    margin: -@standardpadding 0 @standardpadding -@standardpadding;

    // removes gaps between the grid if needed
    &--no_gutters {
        margin: 0;

        > .grid-item {
            padding: 0;
        }
    }

    // Horizontal Alignment of grid-items in grid. Can only be placed on a grid
    .align,
    &.align {
        &--center {
            justify-content: center;
        }

        &--right{
            justify-content: flex-end;
            text-align: right;
        }
    }

    // Vertical Alignment of grid-items in grid. Can be placed on a grid or the grid-item itself
    .valign,
    &.valign {
        &--top {
            align-items: flex-start;
            align-self: flex-start;
        }

        &--bottom {
            align-items: flex-end;
            align-self: flex-end;
        }

        &--center {
            align-items: center;
            align-self: center;
        }

        &--baseline {
            align-items: baseline;
            align-self: baseline;
        }
    }

    &-item {
        flex: 1 1 0%;
        padding: @standardpadding 0 0 @standardpadding;

        & {
            // standalone s usually have a margin
            margin-bottom: 0;
        }
        .grid{
            // for when embedding grids inside grid-items
            margin-bottom: 0;
            width: 100%;
        }

        // Use when you want a blank cell to push a right-aligned cell
        // Note: the cell needs &nbsp;
        &--spacer {
            flex-basis: auto;
        }
        .widthMin(M, {
            min-width: 200px;
            // Usually Cols that are about 1/4, 1/3 of the grid, but we dont want them to get super big
            &--xxxs {
                min-width: 20px;
                max-width: 80px;
            }

            &--xxs {
                min-width: 60px;
                max-width: 140px;
            }

            &--xs {
                min-width: 140px;
                max-width: 200px;
            }

            &--s {
                max-width: 260px;
            }

            &--m {
                max-width: 320px;
            }

            &--l {
                max-width: 400px;
            }

            &--xl {
                max-width: 500px;
            }

            &--xxl {
                max-width: 650px;
            }

        });
    }
}

/*
    Non-responsive grid classes.
    ** For all screen sizes **

    1. hug -> grid item will only be the size of their content.
    2. fit [default] -> [default] all grid items will fit as much as possible on one line
    3. full -> grid item will occupy a full width
    4. 2,3,4 -> an item will be 50%, 33% and 25% width

*/
.cols {
    &--hug {
        min-width: 0;
        flex-basis: auto;
        flex-grow: 0;
    }

    &--fit {
        flex: 1 1 0%;
    }

    &--full {
        flex: 0 0 100%;
    }

    &--2 {
        flex: 0 0 auto;
        width: 50%;
    }

    &--3 {
        flex: 0 0 auto;
        width: 33.33%;
    }

    &--4 {
        flex: 0 0 auto;
        width: 25%;
    }
}

.widthMax(L, {
    .l-cols {
        &--hug {
            min-width: 0;
            flex-grow: 0;
            flex-basis: auto;

        }

        &--fit {
            flex: 1 1 0%;

        }

        &--full {
            flex: 0 0 100%;

        }

        &--2 {
            flex: 0 0 auto;
            width: 50%;

        }

        &--3 {
            flex: 0 0 auto;
            width: 33.33%;

        }

        &--4 {
            flex: 0 0 auto;
            width: 25%;

        }
    }
});

.widthMax(M, {
    .m-cols {
        &--hug {
            min-width: 0;
            flex-grow: 0;
            flex: 1 1 0%;

        }

        &--fit {
            flex: 1 1 auto;

        }
        &--full {
            flex: 0 0 100%;

        }

        &--2 {
            flex: 0 0 auto;
            width: 50%;

        }
        &--3 {
            flex: 0 0 auto;
            width: 33%;

        }

        &--4 {
            flex: 0 0 auto;
            width: 25%;

        }

    }
});


.widthMax(S, {
    .s-cols {
        &--hug {
            min-width: 0;
            flex-grow: 0;
            flex-basis: 100%;

        }

        &--fit {
            flex: 1 1 0%;

        }

        &--full {
            flex: 0 0 100%;

        }

        &--2 {
            flex: 0 0 auto;
            width: 50%;

        }

        &--3 {
            flex: 0 0 auto;
            width: 33.33%;

        }

        &--4 {
            flex: 0 0 auto;
            width: 25%;

        }
    }
});

.widthMax(XS, {
    .xs-cols {
        &--hug {
            min-width: 0;
            flex-grow: 0;
        }

        &--fit {
            flex: 1 1 0%;
        }

        &--full {
            flex: 0 0 100%;
        }
        &--2 {
            flex: 0 0 auto;
            width: 50%;
        }

        &--3 {
            flex: 0 0 auto;
            width: 33.33%;
        }
        &--4 {
            flex: 0 0 auto;
            width: 25%;
        }
    }
});
